#!/usr/bin/env ruby
# frozen_string_literal: true

require 'colorize'
require 'gli'
require 'hacer'
require 'robotto'

class RobottoCLI
  extend GLI::App
  PROJECT_ROOT_REQUIRED_COMMANDS = [:server, :schema]

  program_desc 'Robotto app launcher'
  version Robotto::VERSION
  subcommand_option_handling :normal
  sort_help :manually

  arg :env, :optional
  default_value 'dev'
  flag [:e, :env],
    arg_name: 'env',
    must_match: ['prod', 'dev', 'staging'],
    desc: 'Environment mode(available: prod, dev, staging)'
  flag [:d, :dir], arg_name: 'dir', desc: 'Project\'s working directory'

  pre do |global_opts, command, _opts, _args|
    set_work_dir!(global_opts[:dir]) if global_opts[:dir]
    find_root_dir! if project_required_command?(command)

    true
  end

  desc 'Creates new Robotto project'
  arg '<<ProjectName>>'
  command :new do |c|
    c.action do |global_opts, _, args|
      if args[0].nil? || args[0].length.zero?
        puts "Project name should be provided!\n".red
        puts 'ðŸ’¡Tip: ' + 'robotto new bot_name'.cyan
        next
      end
      params =
        {
          project_name: args[0],
          robotto_path: File.expand_path('..', __dir__),
        }
      params.merge!(global_opts.slice(:dir)).compact

      boilerplate = Robotto::Utils::Boilerplate.new(params)
      boilerplate.generate_project!

      puts "\n" + boilerplate.work_dir.italic
    end
  end

  desc 'Starts bot server'
  command :server do |c|
    c.action do |global_opts, _opts, _args|
      params =
        {
          work_dir: Dir.getwd,
          env: global_opts[:env],
        }
      Robotto::Utils::Launcher.start!(params)
    end
  end

  desc "Telegram Bot Api Schema operations(print #{'robotto help schema'.cyan} for more)"
  command :schema do |schema|
    schema.desc 'Updates or restores Telegram Bot Api schema from GitHub(https://ark0f.github.io/tg-bot-api/custom.json)'
    schema.command :update do |update|
      update.action do
        Robotto::Support::TelegramBotApiSchema.new.update!
        puts "Telegram Bot Api Schema was successfully updated!\n".green

        Robotto::Support::TelegramBotApiSchema.print_schema_version
      end
    end

    schema.desc 'Prints Schema info'
    schema.command :info do |info|
      info.action do
        Robotto::Support::TelegramBotApiSchema.print_schema_version
      end
    end
  end

  desc 'Outputs current gem version and author'
  command :about do |c|
    c.action { Robotto.print_about }
  end

  class << self
    # Finds Robotto project's root dir and changes work dir with it.
    def find_root_dir!
      original_dir = Dir.getwd
      path = original_dir.split('/')
      path[0] = '/'
      loop do
        return true if File.exist?('config/bot.rb')

        path.delete_at(-1)
        break if path.empty?
        Dir.chdir(File.join(path))
      end

      raise "Not an Robotto project directory!\n".red + original_dir.italic
    end

    # Checks command is requires project's root.
    #
    # @param [String] command.
    # @return [Boolean] true if required.
    def project_required_command?(command)
      ([command.name, command.parent&.name].compact & PROJECT_ROOT_REQUIRED_COMMANDS).any?
    end

    # Sets working directory by --dir param.
    #
    # @param [String] dir - directory path.
    def set_work_dir!(dir)
      dir = File.expand_path(dir, Dir.getwd) unless dir[0] == '/'
      raise "PATH NOT FOUND: #{dir.italic}".red unless Dir.exist?(dir)

      FileUtils.chdir(dir)
    end
  end
end

exit RobottoCLI.run(ARGV)
